<?php

namespace Osddqd\HttpClientGenerator\Tests\Feature;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Config;
use Osddqd\HttpClientGenerator\Tests\TestCase;
use PHPUnit\Framework\Attributes\Test;

class AutoMacroRegistrationTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp();
        
        // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
        Cache::forget('http_client_generator.macros');
    }

    #[Test]
    public function it_can_discover_and_register_macros_automatically()
    {
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        $this->createTestMacroStructure();
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º service provider –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        $this->app->register(\Osddqd\HttpClientGenerator\HttpClientGeneratorServiceProvider::class);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞–∫—Ä–æ—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        $this->assertTrue(Http::hasMacro('testclient'));
    }

    #[Test]
    public function it_respects_auto_register_configuration()
    {
        // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        Config::set('http-client-generator.auto_register.enabled', false);
        
        $this->createTestMacroStructure();
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º service provider
        $this->app->register(\Osddqd\HttpClientGenerator\HttpClientGeneratorServiceProvider::class);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞–∫—Ä–æ—Å –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        $this->assertFalse(Http::hasMacro('testclient'));
    }

    #[Test]
    public function it_caches_discovered_macros()
    {
        $this->createTestMacroStructure();
        
        // –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –∫—ç—à
        $this->app->register(\Osddqd\HttpClientGenerator\HttpClientGeneratorServiceProvider::class);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à —Å–æ–∑–¥–∞–Ω
        $this->assertTrue(Cache::has('http_client_generator.macros'));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫—ç—à–∞
        $cachedMacros = Cache::get('http_client_generator.macros');
        $this->assertIsArray($cachedMacros);
        $this->assertContains('App\\Http\\Clients\\TestClient\\TestClientMacro', $cachedMacros);
    }

    #[Test]
    public function clear_cache_command_works()
    {
        // –°–æ–∑–¥–∞–µ–º –∫—ç—à
        Cache::put('http_client_generator.macros', ['test'], 3600);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
        $this->artisan('http-client-generator:clear-cache')
            ->expectsOutput('‚úÖ HTTP client macros cache has been cleared!')
            ->assertExitCode(0);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à –æ—á–∏—â–µ–Ω
        $this->assertFalse(Cache::has('http_client_generator.macros'));
    }

    #[Test]
    public function list_macros_command_shows_discovered_macros()
    {
        $this->createTestMacroStructure();
        
        $this->artisan('http-client-generator:list-macros')
            ->expectsOutput('üîç Discovering HTTP Client Macros...')
            ->assertExitCode(0);
    }

    protected function createTestMacroStructure()
    {
        $clientsPath = app_path('Http/Clients/TestClient');
        
        if (!is_dir($clientsPath)) {
            mkdir($clientsPath, 0755, true);
        }
        
        $macroContent = '<?php

namespace App\Http\Clients\TestClient;

use Illuminate\Support\Facades\Http;

class TestClientMacro
{
    public function testclient(): callable
    {
        return function () {
            return Http::withHeaders([
                "accept" => "application/json",
                "content-type" => "application/json",
            ])->baseUrl("https://api.test.com");
        };
    }
}';
        
        file_put_contents($clientsPath . '/TestClientMacro.php', $macroContent);
    }

    protected function tearDown(): void
    {
        // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        $testPath = app_path('Http/Clients/TestClient');
        if (is_dir($testPath)) {
            array_map('unlink', glob($testPath . '/*'));
            rmdir($testPath);
        }
        
        Cache::forget('http_client_generator.macros');
        
        parent::tearDown();
    }
}
